{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9276631,"sourceType":"datasetVersion","datasetId":5614576}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for data visualization\nimport seaborn as sns # for statistical data visualization\n%matplotlib inline\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-04T11:09:18.726740Z","iopub.execute_input":"2024-09-04T11:09:18.727398Z","iopub.status.idle":"2024-09-04T11:09:18.749248Z","shell.execute_reply.started":"2024-09-04T11:09:18.727304Z","shell.execute_reply":"2024-09-04T11:09:18.747408Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = '/kaggle/input/turkiye-big-city-weather-2020-2022/turkey-big-city-weather-v2.csv'\n\ndf = pd.read_csv(data, sep=';')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:18.752123Z","iopub.execute_input":"2024-09-04T11:09:18.752984Z","iopub.status.idle":"2024-09-04T11:09:18.993889Z","shell.execute_reply.started":"2024-09-04T11:09:18.752931Z","shell.execute_reply":"2024-09-04T11:09:18.992473Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:18.995477Z","iopub.execute_input":"2024-09-04T11:09:18.996024Z","iopub.status.idle":"2024-09-04T11:09:19.036128Z","shell.execute_reply.started":"2024-09-04T11:09:18.995954Z","shell.execute_reply":"2024-09-04T11:09:19.034547Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.039278Z","iopub.execute_input":"2024-09-04T11:09:19.040601Z","iopub.status.idle":"2024-09-04T11:09:19.135699Z","shell.execute_reply.started":"2024-09-04T11:09:19.040543Z","shell.execute_reply":"2024-09-04T11:09:19.133820Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.138080Z","iopub.execute_input":"2024-09-04T11:09:19.138639Z","iopub.status.idle":"2024-09-04T11:09:19.149815Z","shell.execute_reply.started":"2024-09-04T11:09:19.138587Z","shell.execute_reply":"2024-09-04T11:09:19.148070Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_cleaned = df[['location_id',\n                 'weather_code (wmo code)', \n                'temperature_2m_mean (°C)', \n                'apparent_temperature_mean (°C)',\n                'daylight_duration (s)',\n                'sunshine_duration (s)',\n                'rain_sum (mm)',\n                'snowfall_sum (cm)',\n                'precipitation_hours (h)',\n                'wind_speed_10m_max (km/h)',\n                'wind_gusts_10m_max (km/h)',\n                'wind_direction_10m_dominant (°)',\n                'shortwave_radiation_sum (MJ/m²)',\n                'et0_fao_evapotranspiration (mm)']].copy()\ndf_cleaned.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.151928Z","iopub.execute_input":"2024-09-04T11:09:19.152398Z","iopub.status.idle":"2024-09-04T11:09:19.191281Z","shell.execute_reply.started":"2024-09-04T11:09:19.152349Z","shell.execute_reply":"2024-09-04T11:09:19.189675Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"columns_to_median = [col for col in df_cleaned.columns if col not in ['snowfall_sum (cm)', 'precipitation_hours (h)', 'rain_sum (mm)']]\ncolumns_to_sum = ['snowfall_sum (cm)', 'rain_sum (mm)', 'precipitation_hours (h)']\n\n# Create a dictionary specifying the aggregation functions for each column\nagg_dict_median = {col: 'median' for col in columns_to_median}\nagg_dict_sum = {col: 'sum' for col in columns_to_sum}\n\n# Merge the two dictionaries\nagg_dict = {**agg_dict_median, **agg_dict_sum}\n\n# Group the DataFrame and apply the aggregations\ngrouped_df_cleaned = df_cleaned.groupby('location_id').agg(agg_dict)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.193054Z","iopub.execute_input":"2024-09-04T11:09:19.193534Z","iopub.status.idle":"2024-09-04T11:09:19.219615Z","shell.execute_reply.started":"2024-09-04T11:09:19.193486Z","shell.execute_reply":"2024-09-04T11:09:19.218429Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"grouped_df_cleaned.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.221268Z","iopub.execute_input":"2024-09-04T11:09:19.221846Z","iopub.status.idle":"2024-09-04T11:09:19.231273Z","shell.execute_reply.started":"2024-09-04T11:09:19.221800Z","shell.execute_reply":"2024-09-04T11:09:19.229555Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"grouped_df_cleaned.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.235456Z","iopub.execute_input":"2024-09-04T11:09:19.235896Z","iopub.status.idle":"2024-09-04T11:09:19.267177Z","shell.execute_reply.started":"2024-09-04T11:09:19.235855Z","shell.execute_reply":"2024-09-04T11:09:19.265435Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"grouped_df_cleaned.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.269121Z","iopub.execute_input":"2024-09-04T11:09:19.270236Z","iopub.status.idle":"2024-09-04T11:09:19.343587Z","shell.execute_reply.started":"2024-09-04T11:09:19.270163Z","shell.execute_reply":"2024-09-04T11:09:19.341086Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"grouped_df_cleaned.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.345759Z","iopub.execute_input":"2024-09-04T11:09:19.346399Z","iopub.status.idle":"2024-09-04T11:09:19.366290Z","shell.execute_reply.started":"2024-09-04T11:09:19.346302Z","shell.execute_reply":"2024-09-04T11:09:19.364520Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"grouped_df_cleaned = grouped_df_cleaned.drop(['weather_code (wmo code)','daylight_duration (s)'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.368552Z","iopub.execute_input":"2024-09-04T11:09:19.369168Z","iopub.status.idle":"2024-09-04T11:09:19.379029Z","shell.execute_reply.started":"2024-09-04T11:09:19.369103Z","shell.execute_reply":"2024-09-04T11:09:19.377516Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"grouped_df_cleaned.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.381446Z","iopub.execute_input":"2024-09-04T11:09:19.382081Z","iopub.status.idle":"2024-09-04T11:09:19.402234Z","shell.execute_reply.started":"2024-09-04T11:09:19.382015Z","shell.execute_reply":"2024-09-04T11:09:19.400456Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['weather_code (wmo code)'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.403938Z","iopub.execute_input":"2024-09-04T11:09:19.404469Z","iopub.status.idle":"2024-09-04T11:09:19.424052Z","shell.execute_reply.started":"2024-09-04T11:09:19.404420Z","shell.execute_reply":"2024-09-04T11:09:19.422648Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(grouped_df_cleaned.columns)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.426457Z","iopub.execute_input":"2024-09-04T11:09:19.427061Z","iopub.status.idle":"2024-09-04T11:09:19.438772Z","shell.execute_reply.started":"2024-09-04T11:09:19.426996Z","shell.execute_reply":"2024-09-04T11:09:19.437327Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = grouped_df_cleaned","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.440791Z","iopub.execute_input":"2024-09-04T11:09:19.441608Z","iopub.status.idle":"2024-09-04T11:09:19.455417Z","shell.execute_reply.started":"2024-09-04T11:09:19.441551Z","shell.execute_reply":"2024-09-04T11:09:19.453485Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cols = X.columns","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.458112Z","iopub.execute_input":"2024-09-04T11:09:19.458845Z","iopub.status.idle":"2024-09-04T11:09:19.472147Z","shell.execute_reply.started":"2024-09-04T11:09:19.458784Z","shell.execute_reply":"2024-09-04T11:09:19.470664Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\n\nms = MinMaxScaler()\n\nX = ms.fit_transform(X)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.473920Z","iopub.execute_input":"2024-09-04T11:09:19.474459Z","iopub.status.idle":"2024-09-04T11:09:19.495789Z","shell.execute_reply.started":"2024-09-04T11:09:19.474409Z","shell.execute_reply":"2024-09-04T11:09:19.494050Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = pd.DataFrame(X, columns=[cols])\nX.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.497205Z","iopub.execute_input":"2024-09-04T11:09:19.497732Z","iopub.status.idle":"2024-09-04T11:09:19.529811Z","shell.execute_reply.started":"2024-09-04T11:09:19.497676Z","shell.execute_reply":"2024-09-04T11:09:19.528175Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import warnings\n\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.531711Z","iopub.execute_input":"2024-09-04T11:09:19.532168Z","iopub.status.idle":"2024-09-04T11:09:19.543592Z","shell.execute_reply.started":"2024-09-04T11:09:19.532118Z","shell.execute_reply":"2024-09-04T11:09:19.541610Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=2, random_state=0) \n\nkmeans.fit(X)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.545339Z","iopub.execute_input":"2024-09-04T11:09:19.545854Z","iopub.status.idle":"2024-09-04T11:09:19.580404Z","shell.execute_reply.started":"2024-09-04T11:09:19.545799Z","shell.execute_reply":"2024-09-04T11:09:19.579295Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"kmeans.cluster_centers_","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.584222Z","iopub.execute_input":"2024-09-04T11:09:19.586596Z","iopub.status.idle":"2024-09-04T11:09:19.596777Z","shell.execute_reply.started":"2024-09-04T11:09:19.586531Z","shell.execute_reply":"2024-09-04T11:09:19.595142Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# reduction in variation = inertia, the lower it is the better\nkmeans.inertia_","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.599328Z","iopub.execute_input":"2024-09-04T11:09:19.599771Z","iopub.status.idle":"2024-09-04T11:09:19.612925Z","shell.execute_reply.started":"2024-09-04T11:09:19.599729Z","shell.execute_reply":"2024-09-04T11:09:19.611066Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"kmeans.labels_","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.621444Z","iopub.execute_input":"2024-09-04T11:09:19.622135Z","iopub.status.idle":"2024-09-04T11:09:19.639674Z","shell.execute_reply.started":"2024-09-04T11:09:19.622080Z","shell.execute_reply":"2024-09-04T11:09:19.638045Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.cluster import KMeans\ncs = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    kmeans.fit(X)\n    cs.append(kmeans.inertia_)\nplt.plot(range(1, 11), cs)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('CS')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:19.642013Z","iopub.execute_input":"2024-09-04T11:09:19.642564Z","iopub.status.idle":"2024-09-04T11:09:20.123574Z","shell.execute_reply.started":"2024-09-04T11:09:19.642519Z","shell.execute_reply":"2024-09-04T11:09:20.121909Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"kmeans = KMeans(n_clusters=4, random_state=0)\n\nkmeans.fit(X)\n\nkmeans.inertia_","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:20.125340Z","iopub.execute_input":"2024-09-04T11:09:20.125775Z","iopub.status.idle":"2024-09-04T11:09:20.164184Z","shell.execute_reply.started":"2024-09-04T11:09:20.125732Z","shell.execute_reply":"2024-09-04T11:09:20.163063Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"prediction = kmeans.predict(X)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:20.165811Z","iopub.execute_input":"2024-09-04T11:09:20.166651Z","iopub.status.idle":"2024-09-04T11:09:20.175915Z","shell.execute_reply.started":"2024-09-04T11:09:20.166600Z","shell.execute_reply":"2024-09-04T11:09:20.174458Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(prediction)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:20.177577Z","iopub.execute_input":"2024-09-04T11:09:20.178862Z","iopub.status.idle":"2024-09-04T11:09:20.192260Z","shell.execute_reply.started":"2024-09-04T11:09:20.178794Z","shell.execute_reply":"2024-09-04T11:09:20.190783Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"kmeans.labels_","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:20.194611Z","iopub.execute_input":"2024-09-04T11:09:20.195228Z","iopub.status.idle":"2024-09-04T11:09:20.211080Z","shell.execute_reply.started":"2024-09-04T11:09:20.195165Z","shell.execute_reply":"2024-09-04T11:09:20.208913Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Apply t-SNE\nfrom sklearn.manifold import TSNE\n\ntsne = TSNE(n_components=2, perplexity=5)\nX_tsne = tsne.fit_transform(X)\n\n# Plot the results, coloring by cluster\nplt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=prediction)\nplt.title('t-SNE Visualization of K-Means Clusters')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:20.213303Z","iopub.execute_input":"2024-09-04T11:09:20.213827Z","iopub.status.idle":"2024-09-04T11:09:20.727443Z","shell.execute_reply.started":"2024-09-04T11:09:20.213766Z","shell.execute_reply":"2024-09-04T11:09:20.725771Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# apply PCA\n\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\npca_data = pca.fit_transform(X)\n\n# Plot the results, coloring by cluster\nplt.scatter(pca_data[:, 0], pca_data[:, 1], c=prediction)\nplt.title('PCA Visualization of K-Means Clusters')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:20.729544Z","iopub.execute_input":"2024-09-04T11:09:20.730123Z","iopub.status.idle":"2024-09-04T11:09:21.017047Z","shell.execute_reply.started":"2024-09-04T11:09:20.730050Z","shell.execute_reply":"2024-09-04T11:09:21.015783Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#percentage variation explained by each PC\n\nper_var = np.round(pca.explained_variance_ratio_*100, decimals=1)\nprint(per_var)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:21.018641Z","iopub.execute_input":"2024-09-04T11:09:21.019001Z","iopub.status.idle":"2024-09-04T11:09:21.027225Z","shell.execute_reply.started":"2024-09-04T11:09:21.018962Z","shell.execute_reply":"2024-09-04T11:09:21.025585Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"## get the name of the top 10 measurements that contribute most to PC1.\n\nloading_scores = pd.Series(pca.components_[0], index=cols)\nsorted_loading_scores = loading_scores.abs().sort_values(ascending=False)\n\ntop_10_cols = sorted_loading_scores[0:10].index.values\n \n## print the gene names and their scores (and +/- sign)\nprint(loading_scores[top_10_cols])","metadata":{"execution":{"iopub.status.busy":"2024-09-04T11:09:21.028872Z","iopub.execute_input":"2024-09-04T11:09:21.029272Z","iopub.status.idle":"2024-09-04T11:09:21.045139Z","shell.execute_reply.started":"2024-09-04T11:09:21.029229Z","shell.execute_reply":"2024-09-04T11:09:21.043427Z"},"trusted":true},"outputs":[],"execution_count":null}]}